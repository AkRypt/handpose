{"version":3,"sources":["logo.svg","utilities.js","gestures/FingerDescription.js","gestures/GestureDescription.js","gestures/Superr.js","gestures/Closed.js","gestures/Rock.js","assets/victory.png","assets/thumbs_up.png","assets/closed.png","assets/superr.png","assets/heart.png","assets/rock.png","App.js","reportWebVitals.js","index.js"],"names":["fingerJoints","thumb","indexFinger","middleFinger","ringFinger","pinky","drawHand","predictions","ctx","length","forEach","prediction","landmarks","j","Object","keys","finger","k","firstJointIndex","secondJointIndex","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","x","y","arc","Math","PI","fillStyle","fill","Finger","FingerCurl","FingerDirection","GestureDescription","name","this","curls","directions","curl","contrib","push","position","detectedCurls","detectedDirections","score","numParameters","fingerIdx","detectedCurl","expectedCurls","matchingCurlFound","highestCurlContrib","expectedCurl","max","detectedDirection","expectedDirections","matchingDirectionFound","highestDirectionContrib","expectedDirection","superrDescription","addCurl","addDirection","closedDescription","rockDescription","App","webcamRef","useRef","canvasRef","useState","emoji","setEmoji","images","thumbs_up","victory","superr","closed","rock","runHandPose","a","handpose","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","estimateHands","hand","GE","fp","ThumbsUpGesture","SuperrGesture","ClosedGesture","RockGesture","estimate","undefined","gesture","gestures","confidence","map","maxConfidence","indexOf","apply","console","log","getContext","className","ref","style","marginLeft","marginRight","left","right","textAlign","zIndex","src","bottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fc0ae96.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const fingerJoints = {\r\n    thumb: [0, 1, 2, 3, 4],\r\n    indexFinger: [0, 5, 6, 7, 8],\r\n    middleFinger: [0, 9, 10, 11, 12],\r\n    ringFinger: [0, 13, 14, 15, 16],\r\n    pinky: [0, 17, 18, 19, 20]\r\n}\r\n\r\nexport const drawHand = (predictions, ctx) => {\r\n    if (predictions.length > 0) {\r\n        predictions.forEach((prediction) => {\r\n            const landmarks = prediction.landmarks;\r\n\r\n            for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\r\n                let finger = Object.keys(fingerJoints)[j];\r\n                for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\r\n                    const firstJointIndex = fingerJoints[finger][k];\r\n                    const secondJointIndex = fingerJoints[finger][k + 1];\r\n\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(\r\n                        landmarks[firstJointIndex][0],\r\n                        landmarks[firstJointIndex][1]\r\n                    );\r\n                    ctx.lineTo(\r\n                        landmarks[secondJointIndex][0],\r\n                        landmarks[secondJointIndex][1]\r\n                    );\r\n                    ctx.strokeStyle = 'plum';\r\n                    ctx.lineWidth = 4;\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < landmarks.length; i++) {\r\n                const x = landmarks[i][0]\r\n                const y = landmarks[i][1]\r\n                ctx.beginPath();\r\n                ctx.arc(x, y, 5, 0, 3 * Math.PI);\r\n\r\n                ctx.fillStyle = \"indigo\";\r\n                ctx.fill();\r\n            }\r\n        });\r\n    }\r\n}","const Finger = {\r\n\r\n    Thumb: 0,\r\n    Index: 1,\r\n    Middle: 2,\r\n    Ring: 3,\r\n    Pinky: 4,\r\n\r\n    // just for convenience\r\n    all: [0, 1, 2, 3, 4],\r\n\r\n    nameMapping: {\r\n        0: 'Thumb',\r\n        1: 'Index',\r\n        2: 'Middle',\r\n        3: 'Ring',\r\n        4: 'Pinky'\r\n    },\r\n\r\n    // Describes mapping of joints based on the 21 points returned by handpose.\r\n    // Handpose indexes are defined as follows:\r\n    // (all fingers use last index as \"finger tip\")\r\n    // ---------------------------------------------------------------------------\r\n    // [0]     Palm\r\n    // [1-4]   Thumb\r\n    // [5-8]   Index\r\n    // [9-12]  Middle\r\n    // [13-16] Ring\r\n    // [17-20] Pinky\r\n    pointsMapping: {\r\n        0: [[0, 1], [1, 2], [2, 3], [3, 4]],\r\n        1: [[0, 5], [5, 6], [6, 7], [7, 8]],\r\n        2: [[0, 9], [9, 10], [10, 11], [11, 12]],\r\n        3: [[0, 13], [13, 14], [14, 15], [15, 16]],\r\n        4: [[0, 17], [17, 18], [18, 19], [19, 20]]\r\n    },\r\n\r\n    getName: function (value) {\r\n        return (typeof this.nameMapping[value] !== undefined) ?\r\n            this.nameMapping[value] : false;\r\n    },\r\n\r\n    getPoints: function (value) {\r\n        return (typeof this.pointsMapping[value] !== undefined) ?\r\n            this.pointsMapping[value] : false;\r\n    },\r\n}\r\n\r\nconst FingerCurl = {\r\n\r\n    NoCurl: 0,\r\n    HalfCurl: 1,\r\n    FullCurl: 2,\r\n\r\n    nameMapping: {\r\n        0: 'No Curl',\r\n        1: 'Half Curl',\r\n        2: 'Full Curl'\r\n    },\r\n\r\n    getName: function (value) {\r\n        return (typeof this.nameMapping[value] !== undefined) ?\r\n            this.nameMapping[value] : false;\r\n    },\r\n\r\n};\r\n\r\nconst FingerDirection = {\r\n\r\n    VerticalUp: 0,\r\n    VerticalDown: 1,\r\n    HorizontalLeft: 2,\r\n    HorizontalRight: 3,\r\n    DiagonalUpRight: 4,\r\n    DiagonalUpLeft: 5,\r\n    DiagonalDownRight: 6,\r\n    DiagonalDownLeft: 7,\r\n\r\n    nameMapping: {\r\n        0: 'Vertical Up',\r\n        1: 'Vertical Down',\r\n        2: 'Horizontal Left',\r\n        3: 'Horizontal Right',\r\n        4: 'Diagonal Up Right',\r\n        5: 'Diagonal Up Left',\r\n        6: 'Diagonal Down Right',\r\n        7: 'Diagonal Down Left',\r\n    },\r\n\r\n    getName: function (value) {\r\n        return (typeof this.nameMapping[value] !== undefined) ?\r\n            this.nameMapping[value] : false;\r\n    },\r\n};\r\n\r\nexport {\r\n    Finger, FingerCurl, FingerDirection\r\n}","export default class GestureDescription {\r\n    constructor(name) {\r\n\r\n        // name (should be unique)\r\n        this.name = name;\r\n\r\n        // gesture as described by curls / directions\r\n        this.curls = {};\r\n        this.directions = {};\r\n    }\r\n\r\n    addCurl(finger, curl, contrib = 1.0) {\r\n        if (typeof this.curls[finger] === 'undefined') {\r\n            this.curls[finger] = [];\r\n        }\r\n        this.curls[finger].push([curl, contrib]);\r\n    }\r\n\r\n    addDirection(finger, position, contrib = 1.0) {\r\n        if (typeof this.directions[finger] === 'undefined') {\r\n            this.directions[finger] = [];\r\n        }\r\n        this.directions[finger].push([position, contrib]);\r\n    }\r\n\r\n    matchAgainst(detectedCurls, detectedDirections) {\r\n\r\n        let score = 0.0;\r\n        let numParameters = 0;\r\n\r\n        // look at the detected curl of each finger and compare with\r\n        // the expected curl of this finger inside current gesture\r\n        for (let fingerIdx in detectedCurls) {\r\n\r\n            let detectedCurl = detectedCurls[fingerIdx];\r\n            let expectedCurls = this.curls[fingerIdx];\r\n\r\n            if (typeof expectedCurls === 'undefined') {\r\n                // no curl description available for this finger\r\n                // => no contribution to the final score\r\n                continue;\r\n            }\r\n\r\n            // increase the number of relevant parameters\r\n            numParameters++;\r\n\r\n            // compare to each possible curl of this specific finger\r\n            let matchingCurlFound = false;\r\n            let highestCurlContrib = 0;\r\n            for (const [expectedCurl, contrib] of expectedCurls) {\r\n                if (detectedCurl == expectedCurl) {\r\n                    score += contrib;\r\n                    highestCurlContrib = Math.max(highestCurlContrib, contrib);\r\n                    matchingCurlFound = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // subtract penalty if curl was expected but not found\r\n            if (!matchingCurlFound) {\r\n                score -= highestCurlContrib;\r\n            }\r\n        }\r\n\r\n        // same for detected direction of each finger\r\n        for (let fingerIdx in detectedDirections) {\r\n\r\n            let detectedDirection = detectedDirections[fingerIdx];\r\n            let expectedDirections = this.directions[fingerIdx];\r\n\r\n            if (typeof expectedDirections === 'undefined') {\r\n                // no direction description available for this finger\r\n                // => no contribution to the final score\r\n                continue;\r\n            }\r\n\r\n            // increase the number of relevant parameters\r\n            numParameters++;\r\n\r\n            // compare to each possible direction of this specific finger\r\n            let matchingDirectionFound = false;\r\n            let highestDirectionContrib = 0;\r\n            for (const [expectedDirection, contrib] of expectedDirections) {\r\n                if (detectedDirection == expectedDirection) {\r\n                    score += contrib;\r\n                    highestDirectionContrib = Math.max(highestDirectionContrib, contrib);\r\n                    matchingDirectionFound = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // subtract penalty if direction was expected but not found\r\n            if (!matchingDirectionFound) {\r\n                score -= highestDirectionContrib;\r\n            }\r\n        }\r\n\r\n        // multiply final score with 10 (to maintain compatibility)\r\n        let finalScore = (score / numParameters) * 10;\r\n\r\n        return finalScore;\r\n    }\r\n}","import { Finger, FingerCurl, FingerDirection } from './FingerDescription';\r\nimport GestureDescription from './GestureDescription';\r\n\r\n\r\n// describe victory gesture ✌️\r\nconst superrDescription = new GestureDescription('superr');\r\n\r\n\r\n// thumb:\r\nsuperrDescription.addCurl(Finger.Thumb, FingerCurl.HalfCurl, 1.0);\r\n// superrDescription.addDirection(Finger.Thumb, FingerDirection.VerticalUp, 1.0);\r\nsuperrDescription.addDirection(Finger.Thumb, FingerDirection.DiagonalUpLeft, 1.0);\r\nsuperrDescription.addDirection(Finger.Thumb, FingerDirection.DiagonalUpRight, 1.0);\r\nsuperrDescription.addDirection(Finger.Thumb, FingerDirection.HorizontalRight, 1.0);\r\n\r\n// index:\r\nsuperrDescription.addCurl(Finger.Index, FingerCurl.FullCurl, 1.0);\r\nsuperrDescription.addDirection(Finger.Index, FingerDirection.VerticalDown, 1.0);\r\nsuperrDescription.addDirection(Finger.Index, FingerDirection.DiagonalDownLeft, 1.0);\r\nsuperrDescription.addDirection(Finger.Index, FingerDirection.DiagonalDownRight, 1.0);\r\nsuperrDescription.addDirection(Finger.Index, FingerDirection.HorizontalLeft, 1.0);\r\nsuperrDescription.addDirection(Finger.Index, FingerDirection.HorizontalRight, 1.0);\r\n\r\n// middle:\r\nsuperrDescription.addCurl(Finger.Middle, FingerCurl.NoCurl, 1.0);\r\nsuperrDescription.addDirection(Finger.Middle, FingerDirection.VerticalUp, 1.0);\r\nsuperrDescription.addDirection(Finger.Middle, FingerDirection.DiagonalUpLeft, 1.0);\r\nsuperrDescription.addDirection(Finger.Middle, FingerDirection.DiagonalUpRight, 1.0);\r\n\r\n// ring:\r\nsuperrDescription.addCurl(Finger.Ring, FingerCurl.NoCurl, 1.0);\r\nsuperrDescription.addDirection(Finger.Ring, FingerDirection.VerticalUp, 1.0);\r\nsuperrDescription.addDirection(Finger.Ring, FingerDirection.DiagonalUpLeft, 1.0);\r\nsuperrDescription.addDirection(Finger.Ring, FingerDirection.DiagonalUpRight, 1.0);\r\n\r\n// pinky:\r\nsuperrDescription.addCurl(Finger.Pinky, FingerCurl.NoCurl, 1.0);\r\nsuperrDescription.addDirection(Finger.Pinky, FingerDirection.VerticalUp, 1.0);\r\nsuperrDescription.addDirection(Finger.Pinky, FingerDirection.DiagonalUpLeft, 1.0);\r\nsuperrDescription.addDirection(Finger.Pinky, FingerDirection.DiagonalUpRight, 1.0);\r\n\r\nexport default superrDescription;","import { Finger, FingerCurl, FingerDirection } from './FingerDescription';\r\nimport GestureDescription from './GestureDescription';\r\n\r\n// describe closed gesture ✌️\r\nconst closedDescription = new GestureDescription('closed');\r\n\r\n// thumb:\r\n// - curl: none (must)\r\n// - direction vertical up (best)\r\n// - direction diagonal up left / right (acceptable)\r\nclosedDescription.addCurl(Finger.Thumb, FingerCurl.FullCurl, 1.0);\r\nclosedDescription.addDirection(Finger.Thumb, FingerDirection.VerticalUp, 1.0);\r\nclosedDescription.addDirection(Finger.Thumb, FingerDirection.DiagonalUpLeft, 0.9);\r\nclosedDescription.addDirection(Finger.Thumb, FingerDirection.DiagonalUpRight, 0.9);\r\n\r\n// all other fingers:\r\n// - curled (best)\r\n// - half curled (acceptable)\r\n// - pointing down is NOT acceptable\r\nfor(let finger of [Finger.Index, Finger.Middle, Finger.Ring, Finger.Pinky]) {\r\n  closedDescription.addCurl(finger, FingerCurl.FullCurl, 1.0);\r\n  closedDescription.addCurl(finger, FingerCurl.HalfCurl, 0.9);\r\n}\r\n\r\n// require the index finger to be somewhat left or right pointing\r\n// but NOT down and NOT fully up\r\nclosedDescription.addDirection(Finger.Index, FingerDirection.DiagonalUpLeft, 1.0);\r\nclosedDescription.addDirection(Finger.Index, FingerDirection.HorizontalLeft, 1.0);\r\nclosedDescription.addDirection(Finger.Index, FingerDirection.HorizontalRight, 1.0);\r\nclosedDescription.addDirection(Finger.Index, FingerDirection.DiagonalUpRight, 1.0);\r\n\r\nexport default closedDescription;","import { Finger, FingerCurl, FingerDirection } from './FingerDescription';\r\nimport GestureDescription from './GestureDescription';\r\n\r\n\r\n// describe rock gesture ✌️\r\nconst rockDescription = new GestureDescription('rock');\r\n\r\n\r\n// thumb:\r\n// rockDescription.addCurl(Finger.Thumb, FingerCurl.FullCurl, 1.0);\r\n// rockDescription.addDirection(Finger.Thumb, FingerDirection.VerticalUp, 1.0);\r\n// rockDescription.addDirection(Finger.Thumb, FingerDirection.DiagonalUpLeft, 1.0);\r\n// rockDescription.addDirection(Finger.Thumb, FingerDirection.DiagonalUpRight, 1.0);\r\n\r\n// index:\r\nrockDescription.addCurl(Finger.Index, FingerCurl.NoCurl, 1.0);\r\nrockDescription.addDirection(Finger.Index, FingerDirection.VerticalUp, 1.0);\r\nrockDescription.addDirection(Finger.Index, FingerDirection.DiagonalUpLeft, 1.0);\r\nrockDescription.addDirection(Finger.Index, FingerDirection.DiagonalUpRight, 1.0);\r\n\r\n// middle:\r\nrockDescription.addCurl(Finger.Middle, FingerCurl.FullCurl, 1.0);\r\nrockDescription.addDirection(Finger.Middle, FingerDirection.VerticalDown, 1.0);\r\nrockDescription.addDirection(Finger.Middle, FingerDirection.DiagonalDownLeft, 1.0);\r\nrockDescription.addDirection(Finger.Middle, FingerDirection.DiagonalDownRight, 1.0);\r\n\r\n// ring:\r\nrockDescription.addCurl(Finger.Ring, FingerCurl.FullCurl, 1.0);\r\nrockDescription.addDirection(Finger.Ring, FingerDirection.VerticalDown, 1.0);\r\nrockDescription.addDirection(Finger.Ring, FingerDirection.DiagonalDownLeft, 1.0);\r\nrockDescription.addDirection(Finger.Ring, FingerDirection.DiagonalDownRight, 1.0);\r\n\r\n// pinky:\r\nrockDescription.addCurl(Finger.Pinky, FingerCurl.NoCurl, 1.0);\r\nrockDescription.addDirection(Finger.Pinky, FingerDirection.VerticalUp, 1.0);\r\nrockDescription.addDirection(Finger.Pinky, FingerDirection.DiagonalUpLeft, 1.0);\r\nrockDescription.addDirection(Finger.Pinky, FingerDirection.DiagonalUpRight, 1.0);\r\n\r\nexport default rockDescription;","export default __webpack_public_path__ + \"static/media/victory.5902b718.png\";","export default __webpack_public_path__ + \"static/media/thumbs_up.e52702e1.png\";","export default __webpack_public_path__ + \"static/media/closed.749a846c.png\";","export default __webpack_public_path__ + \"static/media/superr.fc04f169.png\";","export default __webpack_public_path__ + \"static/media/heart.19710aac.png\";","export default __webpack_public_path__ + \"static/media/rock.8a9aa7e8.png\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useRef, useState } from 'react';\nimport Webcam from \"react-webcam\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport * as fp from \"fingerpose\";\nimport { drawHand } from './utilities';\nimport {SuperrGesture, ClosedGesture, RockGesture} from \"./gestures\";\nimport victory from \"./assets/victory.png\";\nimport thumbs_up from \"./assets/thumbs_up.png\";\nimport closed from './assets/closed.png';\nimport heart from './assets/heart.png';\nimport superr from './assets/superr.png';\nimport rock from './assets/rock.png';\n\nfunction App() {\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const [emoji, setEmoji] = useState(null);\n  const images = { \n    thumbs_up: thumbs_up, \n    victory: victory, \n    superr: superr,\n    closed: closed, \n    rock: rock\n  };\n\n  const runHandPose = async () => {\n    const net = await handpose.load();\n    // Loop and detect hands\n    setInterval(() => {\n      detect(net)\n    }, 10)\n  }\n\n  const detect = async (net) => {\n    if (typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4) {\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      const hand = await net.estimateHands(video);\n\n      if (hand.length > 0) {\n        const GE = new fp.GestureEstimator([\n          // fp.Gestures.VictoryGesture,\n          fp.Gestures.ThumbsUpGesture,\n          SuperrGesture,\n          ClosedGesture,\n          RockGesture\n        ]);\n        const gesture = await GE.estimate(hand[0].landmarks, 4);\n        if (gesture.gestures !== undefined && gesture.gestures.length > 0) {\n\n          const confidence = gesture.gestures.map(\n            (prediction) => prediction.score\n          );\n          const maxConfidence = confidence.indexOf(\n            Math.max.apply(null, confidence)\n          );\n          setEmoji(gesture.gestures[maxConfidence].name);\n          console.log(gesture.gestures)\n        }\n      }\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  }\n\n  runHandPose();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam ref={webcamRef}\n          style={{\n            position: 'absolute',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            left: 0,\n            right: 0,\n            textAlign: 'center',\n            zIndex: 9,\n            width: 640,\n            height: 480\n          }}\n        />\n\n        <canvas ref={canvasRef}\n          style={{\n            position: 'absolute',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            left: 0,\n            right: 0,\n            textAlign: 'center',\n            zIndex: 9,\n            width: 640,\n            height: 480\n          }}\n        />\n\n        {emoji !== null ? <img src={images[emoji]} style={{\n          position: 'absolute',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n          left: 400,\n          bottom: 400,\n          right: 0,\n          zIndex: 12,\n          textAlign: 'center',\n          height: 100\n        }} /> : \"\"}\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}